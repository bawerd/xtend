{
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "name": "logule",
  "description": "An advanced console logging library",
  "version": "0.6.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/logule.git"
  },
  "main": "logule.js",
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "test": "tap ./test"
  },
  "dependencies": {
    "colors": "~0.5.1",
    "semver": "~1.0.13"
  },
  "devDependencies": {
    "tap": "~0.2.5"
  },
  "bugs": {
    "url": "http://github.com/clux/logule/issues"
  },
  "licence": "MIT",
  "optionalDependencies": {},
  "readme": "# Logule [![Build Status](https://secure.travis-ci.org/clux/logule.png)](http://travis-ci.org/clux/logule)\n\nLogule is an advanced logging utility for nodejs. It is analogous to `console.log`\nand can take multiple arguments, but additionally it prefixes\nthe current time, the log level, and optionally, prefixed namespaces\n(with optional padding).\n\nShortcut methods for the log levels are available as: `log.error`, `log.warn`,\n`log.info`, `log.debug`, `log.trace`, `log.zalgo`, and as a bonus,\n`log.line`. These methods are additionally chainable.\n\nIt favours a combination of Dependency Injection and environment variable based\ncontrol to allow for both tree-based log level filtration (via DI),\nand globally controllable log levels (via evars).\n\n## Usage\nBasic usage:\n\n````javascript\nvar logule = require('logule');\nlogule\n  .error(\"this is an error message\")\n  .warn(\"warning\")\n  .info(\"info msg\")\n  .debug(\"chained debug\");\n````\n\n![simple output!](https://github.com/clux/logule/raw/master/imgs/outputsimple.png)\n\n## Namespaces\nTo add a namespace prefix, subclass logule with it:\n\n````javascript\nlog = logule.sub('BUILD');\nlog.trace(\"Trying to compile main.js\");\nlog.error(\"Failed\");\nlogule.info(\"Shutting down\")\n````\n\n![one namespace output!](https://github.com/clux/logule/raw/master/imgs/output.png)\n\n### Multiple Namespaces\nPass in more strings to get more namespaces prefixed\n\n````javascript\nvar log = logule.sub('BUILD', 'COMPILE');\nlog.debug('log has two prefixes');\n````\n\n### Namespace Padding\nCall `.pad(size)` on a logger instance to specify a fixed indentation level for each namespace.\n\n````javascript\nlog.pad(16);\nlog.warn('my namespaces are padded');\n````\n\nMessages will here begin `(16 + delimiter_size)*num_namespaces` characters out.\nLarge namespaces (>specified size), will stand out from the crowd.\n\n## Line\nAn awesome feature inspired by [nlogger](https://github.com/igo/nlogger) - but using logule\nsemantics; `logule.line()` reads the line and filename of the calling function\nby directly inspecting the stack.\n\n````javascript\nlog = logule.sub('CRAZYDEBUG');\nlog.debug('dumping lines to console');\nlog.line('who called me?');\nlog.line('and now?');\n```\n\n![line output!](https://github.com/clux/logule/raw/master/imgs/line.png)\n\n## Passing log around\n### Dependency Injection\n#### Subclasses\nA good use of `.sub()` involve inheriting based on namespaces, and linking\ninstances together.\n\n````javascript\nvar log = logule.sub('BUILD');\nvar sublog = log.sub('COMPILE');\n````\n\nHere `sublog` would provide same output as `logule.sub('BUILD', 'COMPILE')`.\n\nIt is advantageous to do 'one namespace sub at a time', as then it is easier\nto filter log output from large chunks of code at a time,\nas well as maintaining a sensible log hierarchy.\n\nA `log.sub()` maintains all padding, suppressed log levels, its locked status,\nand namespace properties set on the original `log` instance. Therefore, it works as if there's\nan implicit link between the sub and its parent.\n\n#### Suppress\nSuppressing logs from an instance is done in a very neat, propagating,\nand non-breaking way. `.suppress(methods...)` suppresses output\nfrom specified methods, but still allows them to be called, and they still chain.\n\n````javascript\nlog.suppress('debug', 'info');\nlog.warn('works').info('suppressed').error('works').debug('suppressed');\n````\n\nAll subclasses subsequently created from a suppressed instance,\nwill also be suppressed. To unsuppress, use `.allow()`.\n\n#### Allow\nAllows modules down in the hierarchy to log things that have been suppressed\nby supers. This only works if global log levels have not been enforced.\n\n````javascript\nlog.suppress('debug', 'info');\nvar l2 = log.sub('forModuleX');\nl2.allow('debug');\nl2.debug('works!')\n````\n\n#### Get Method\nA debug module should only need `log.debug`. You can save typing,\nand enforce this behaviour by calling `.get('debug')` on an instance,\nto return the correctly bound instance method to pass down.\n\n````javascript\nvar dbg = log.get('debug');\ndbg(\"works like log.debug - nothing else accessible through this var\");\n````\n\nNote that if `log` have called `.suppress('debug')` earlier - or if it is a `.sub()`\nof an instance that have called `.suppress('debug')`, then you would only get\na suppressed function from `.get('debug')`.\n\n### Tree Based Log Levels\nBy only using `.sub()` instances inheriting from a single base instance,\nyou can implement tree based log levels at start time by calling\n`.suppress()` and `.allow()` on the base instance - or any branch point\nyou would like.\n\n````javascript\nvar log = logule.sub('APP');\n//log.suppress('info','debug'); // uncomment to globally suppress\n\nvar modelsLog = log.sub('MODEL'); // pass this to models\n//modelsLog.suppress('warn'); // uncomment to suppress warnings below\n\nvar eventsLog = modelsLog.sub('EVENT'); // pass this down from models to events\n//eventsLog.allow('debug'); // uncomment to temporarily allow debugs in this module\n````\n\nTree based log levels is the safe, overridable version of log levels.\nTo strictly enforce suppression of certain levels, use environment variables.\n\n### Global Log Levels\nTo globally filter log levels, set the LOGULE_SUPPRESS environment variable.\n\n    $ export LOGULE_SUPPRESS=debug,trace,line\n\nThis will globally override suppress/allow calls for any branch regarding\n`debug()`, `trace()` and `line()` and hide all of their outputs.\n\nAlternatively, if you want to primarily allow only a few methods rather than\nlist all the ones you want to disallow, you can set the LOGULE_ALLOW environment\nvariable instead.\n\n````bash\n$ export LOGULE_ALLOW=error,warn\n````\n\nThis will hide all output from any othes methods than `warn()` and `error()`.\n\nIf by any chance both environment variables are set, logule will act only\non the LOGULE_SUPPRESS one.\n\n### Verifying Logule Validity\nWhen passing logule subs around, it might be useful for separate code to test\nwhether what is received is an appropriate Logule instance or not.\nUnfortunately, instanceof testing against your installed logule will only work\nwhen your code is not separated into modules.\n\nTherefore, to support npm module style where there are possibly multiple installations\nof logule spread around, the module can test that the one passed in,\nhas a version compatible with the module's own using a built in helper function.\n\n````javascript\nvar logule = require('logule');\nfunction (logInput) {\n  if (logule.verify(logInput)) {\n    // logInput exists, is an instance of logule, and its version is ~logule.data.version\n  }\n}\n````\n\nNote that single functions like `logule.get('info')` will of course not pass this test.\nIf your API expects a single logger function, then\nyou should simply type test the input as a function.\n\n## Zalgo\nH̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ\n\n````javascript\nlog.zalgo(\"all is lost\");\n````\n\n## Installation\n\n````bash\n$ npm install logule\n````\n\n## Running tests\nInstall development dependencies\n\n````bash\n$ npm install\n````\n\nRun the tests\n\n````bash\n$ npm test\n````\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "Readme.md",
  "_id": "logule@0.6.2",
  "dist": {
    "shasum": "bf85575682d61dee37334475bc515ba703bdf368"
  },
  "_from": "logule@~0.6.1",
  "_resolved": "https://registry.npmjs.org/logule/-/logule-0.6.2.tgz"
}
